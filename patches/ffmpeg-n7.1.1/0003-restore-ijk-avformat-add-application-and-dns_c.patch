From 00151c6634864504f71858aa015428294c6584bb Mon Sep 17 00:00:00 2001
From: qianlongxu <qianlongxu@gmail.com>
Date: Wed, 28 May 2025 17:37:31 +0800
Subject: [PATCH] restore ijk avformat add application and dns_cache

---
 libavformat/Makefile      |   4 +
 libavformat/application.c | 213 ++++++++++++++++++++++++++++++++++
 libavformat/application.h | 120 ++++++++++++++++++++
 libavformat/dns_cache.c   | 232 ++++++++++++++++++++++++++++++++++++++
 libavformat/dns_cache.h   |  39 +++++++
 5 files changed, 608 insertions(+)
 create mode 100644 libavformat/application.c
 create mode 100644 libavformat/application.h
 create mode 100644 libavformat/dns_cache.c
 create mode 100644 libavformat/dns_cache.h

diff --git a/libavformat/Makefile b/libavformat/Makefile
index 7ca68a7..e5934e9 100644
--- a/libavformat/Makefile
+++ b/libavformat/Makefile
@@ -5,6 +5,8 @@ HEADERS = avformat.h                                                    \
           avio.h                                                        \
           version.h                                                     \
           version_major.h                                               \
+          application.h                                                 \
+          dns_cache.h                                                   \
 
 OBJS = allformats.o         \
        avformat.o           \
@@ -30,6 +32,8 @@ OBJS = allformats.o         \
        url.o                \
        utils.o              \
        version.o            \
+       application.o        \
+       dns_cache.o          \
 
 OBJS-$(HAVE_LIBC_MSVCRT)                 += file_open.o
 
diff --git a/libavformat/application.c b/libavformat/application.c
new file mode 100644
index 0000000..de093b9
--- /dev/null
+++ b/libavformat/application.c
@@ -0,0 +1,213 @@
+/*
+ * copyright (c) 2016 Zhang Rui
+ *
+ * This file is part of FFmpeg.
+ *
+ * FFmpeg is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * FFmpeg is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with FFmpeg; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#include "application.h"
+#include "libavformat/network.h"
+#include "libavutil/avstring.h"
+#include "libavutil/mem.h"
+
+static int av_application_alloc(AVApplicationContext **ph, void *opaque)
+{
+    AVApplicationContext *h = NULL;
+
+    h = av_mallocz(sizeof(AVApplicationContext));
+    if (!h)
+        return AVERROR(ENOMEM);
+
+    h->opaque = opaque;
+
+    *ph = h;
+    return 0;
+}
+
+int av_application_open(AVApplicationContext **ph, void *opaque)
+{
+    int ret = av_application_alloc(ph, opaque);
+    if (ret)
+        return ret;
+
+    return 0;
+}
+
+static void av_application_close(AVApplicationContext *h)
+{
+    av_free(h);
+}
+
+void av_application_closep(AVApplicationContext **ph)
+{
+    if (!ph || !*ph)
+        return;
+
+    av_application_close(*ph);
+    *ph = NULL;
+}
+
+void av_application_on_http_event(AVApplicationContext *h, int event_type, AVAppHttpEvent *event)
+{
+    if (h && h->func_on_app_event)
+        h->func_on_app_event(h, event_type, (void *)event, sizeof(AVAppHttpEvent));
+}
+
+void av_application_will_http_open(AVApplicationContext *h, void *obj, const char *url)
+{
+    AVAppHttpEvent event = {0};
+
+    if (!h || !obj || !url)
+        return;
+
+    event.obj        = obj;
+    av_strlcpy(event.url, url, sizeof(event.url));
+
+    av_application_on_http_event(h, AVAPP_EVENT_WILL_HTTP_OPEN, &event);
+}
+
+void av_application_did_http_open(AVApplicationContext *h, void *obj, const char *url, int error, int http_code, int64_t filesize)
+{
+    AVAppHttpEvent event = {0};
+
+    if (!h || !obj || !url)
+        return;
+
+    event.obj        = obj;
+    av_strlcpy(event.url, url, sizeof(event.url));
+    event.error     = error;
+    event.http_code = http_code;
+    event.filesize  = filesize;
+
+    av_application_on_http_event(h, AVAPP_EVENT_DID_HTTP_OPEN, &event);
+}
+
+void av_application_will_http_seek(AVApplicationContext *h, void *obj, const char *url, int64_t offset)
+{
+    AVAppHttpEvent event = {0};
+
+    if (!h || !obj || !url)
+        return;
+
+    event.obj        = obj;
+    event.offset     = offset;
+    av_strlcpy(event.url, url, sizeof(event.url));
+
+    av_application_on_http_event(h, AVAPP_EVENT_WILL_HTTP_SEEK, &event);
+}
+
+void av_application_did_http_seek(AVApplicationContext *h, void *obj, const char *url, int64_t offset, int error, int http_code)
+{
+    AVAppHttpEvent event = {0};
+
+    if (!h || !obj || !url)
+        return;
+
+    event.obj        = obj;
+    event.offset     = offset;
+    av_strlcpy(event.url, url, sizeof(event.url));
+    event.error     = error;
+    event.http_code = http_code;
+
+    av_application_on_http_event(h, AVAPP_EVENT_DID_HTTP_SEEK, &event);
+}
+
+static void av_application_on_io_traffic(AVApplicationContext *h, AVAppIOTraffic *event)
+{
+    if (h && h->func_on_app_event)
+        h->func_on_app_event(h, AVAPP_EVENT_IO_TRAFFIC, (void *)event, sizeof(AVAppIOTraffic));
+}
+
+int  av_application_on_io_control(AVApplicationContext *h, int event_type, AVAppIOControl *control)
+{
+    if (h && h->func_on_app_event)
+        return h->func_on_app_event(h, event_type, (void *)control, sizeof(AVAppIOControl));
+    return 0;
+}
+
+int av_application_on_tcp_will_open(AVApplicationContext *h)
+{
+    if (h && h->func_on_app_event) {
+        AVAppTcpIOControl control = {0};
+        return h->func_on_app_event(h, AVAPP_CTRL_WILL_TCP_OPEN, (void *)&control, sizeof(AVAppTcpIOControl));
+    }
+    return 0;
+}
+
+// only callback returns error
+int av_application_on_tcp_did_open(AVApplicationContext *h, int error, int fd, AVAppTcpIOControl *control)
+{
+    struct sockaddr_storage so_stg;
+    int       ret = 0;
+    socklen_t so_len = sizeof(so_stg);
+    int       so_family;
+    char      *so_ip_name = control->ip;
+
+    if (!h || !h->func_on_app_event || fd <= 0)
+        return 0;
+
+    ret = getpeername(fd, (struct sockaddr *)&so_stg, &so_len);
+    if (ret)
+        return 0;
+    control->error = error;
+    control->fd = fd;
+
+    so_family = ((struct sockaddr*)&so_stg)->sa_family;
+    switch (so_family) {
+        case AF_INET: {
+            struct sockaddr_in* in4 = (struct sockaddr_in*)&so_stg;
+            if (inet_ntop(AF_INET, &(in4->sin_addr), so_ip_name, sizeof(control->ip))) {
+                control->family = AF_INET;
+                control->port = in4->sin_port;
+            }
+            break;
+        }
+        case AF_INET6: {
+            struct sockaddr_in6* in6 = (struct sockaddr_in6*)&so_stg;
+            if (inet_ntop(AF_INET6, &(in6->sin6_addr), so_ip_name, sizeof(control->ip))) {
+                control->family = AF_INET6;
+                control->port = in6->sin6_port;
+            }
+            break;
+        }
+    }
+
+    return h->func_on_app_event(h, AVAPP_CTRL_DID_TCP_OPEN, (void *)control, sizeof(AVAppTcpIOControl));
+}
+
+void av_application_on_async_statistic(AVApplicationContext *h, AVAppAsyncStatistic *statistic)
+{
+    if (h && h->func_on_app_event)
+        h->func_on_app_event(h, AVAPP_EVENT_ASYNC_STATISTIC, (void *)statistic, sizeof(AVAppAsyncStatistic));
+}
+
+void av_application_on_async_read_speed(AVApplicationContext *h, AVAppAsyncReadSpeed *speed)
+{
+    if (h && h->func_on_app_event)
+        h->func_on_app_event(h, AVAPP_EVENT_ASYNC_READ_SPEED, (void *)speed, sizeof(AVAppAsyncReadSpeed));
+}
+
+void av_application_did_io_tcp_read(AVApplicationContext *h, void *obj, int bytes)
+{
+    AVAppIOTraffic event = {0};
+    if (!h || !obj || bytes <= 0)
+        return;
+
+    event.obj        = obj;
+    event.bytes      = bytes;
+
+    av_application_on_io_traffic(h, &event);
+}
diff --git a/libavformat/application.h b/libavformat/application.h
new file mode 100644
index 0000000..b9e7f5b
--- /dev/null
+++ b/libavformat/application.h
@@ -0,0 +1,120 @@
+/*
+ * copyright (c) 2016 Zhang Rui
+ *
+ * This file is part of FFmpeg.
+ *
+ * FFmpeg is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * FFmpeg is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with FFmpeg; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#ifndef AVUTIL_APPLICATION_H
+#define AVUTIL_APPLICATION_H
+
+#include <stdio.h>
+
+#define AVAPP_EVENT_WILL_HTTP_OPEN  1 //AVAppHttpEvent
+#define AVAPP_EVENT_DID_HTTP_OPEN   2 //AVAppHttpEvent
+#define AVAPP_EVENT_WILL_HTTP_SEEK  3 //AVAppHttpEvent
+#define AVAPP_EVENT_DID_HTTP_SEEK   4 //AVAppHttpEvent
+
+#define AVAPP_EVENT_ASYNC_STATISTIC     0x11000 //AVAppAsyncStatistic
+#define AVAPP_EVENT_ASYNC_READ_SPEED    0x11001 //AVAppAsyncReadSpeed
+#define AVAPP_EVENT_IO_TRAFFIC          0x12204 //AVAppIOTraffic
+
+#define AVAPP_CTRL_WILL_TCP_OPEN   0x20001 //AVAppTcpIOControl
+#define AVAPP_CTRL_DID_TCP_OPEN    0x20002 //AVAppTcpIOControl
+
+#define AVAPP_CTRL_WILL_HTTP_OPEN  0x20003 //AVAppIOControl
+#define AVAPP_CTRL_WILL_LIVE_OPEN  0x20005 //AVAppIOControl
+
+#define AVAPP_CTRL_WILL_CONCAT_SEGMENT_OPEN 0x20007 //AVAppIOControl
+
+typedef struct AVAppIOControl {
+    size_t  size;
+    char    url[4096];      /* in, out */
+    int     segment_index;  /* in, default = 0 */
+    int     retry_counter;  /* in */
+
+    int     is_handled;     /* out, default = false */
+    int     is_url_changed; /* out, default = false */
+} AVAppIOControl;
+
+typedef struct AVAppTcpIOControl {
+    int  error;
+    int  family;
+    char ip[96];
+    int  port;
+    int  fd;
+} AVAppTcpIOControl;
+
+typedef struct AVAppAsyncStatistic {
+    size_t  size;
+    int64_t buf_backwards;
+    int64_t buf_forwards;
+    int64_t buf_capacity;
+} AVAppAsyncStatistic;
+
+typedef struct AVAppAsyncReadSpeed {
+    size_t  size;
+    int     is_full_speed;
+    int64_t io_bytes;
+    int64_t elapsed_milli;
+} AVAppAsyncReadSpeed;
+
+typedef struct AVAppHttpEvent
+{
+    void    *obj;
+    char     url[4096];
+    int64_t  offset;
+    int      error;
+    int      http_code;
+    int64_t  filesize;
+} AVAppHttpEvent;
+
+typedef struct AVAppIOTraffic
+{
+    void   *obj;
+    int     bytes;
+} AVAppIOTraffic;
+
+typedef struct AVApplicationContext AVApplicationContext;
+typedef struct AVClass AVClass;
+struct AVApplicationContext {
+    const AVClass *av_class;    /**< information for av_log(). Set by av_application_open(). */
+    void *opaque;               /**< user data. */
+    int (*func_on_app_event)(AVApplicationContext *h, int event_type ,void *obj, size_t size);
+};
+
+// open/close
+int  av_application_open(AVApplicationContext **ph, void *opaque);
+void av_application_closep(AVApplicationContext **ph);
+
+// custom protocol invoke
+void av_application_on_http_event(AVApplicationContext *h, int event_type, AVAppHttpEvent *event);
+int  av_application_on_io_control(AVApplicationContext *h, int event_type, AVAppIOControl *control);
+void av_application_on_async_statistic(AVApplicationContext *h, AVAppAsyncStatistic *statistic);
+void av_application_on_async_read_speed(AVApplicationContext *h, AVAppAsyncReadSpeed *speed);
+
+// http event
+void av_application_will_http_open(AVApplicationContext *h, void *obj, const char *url);
+void av_application_did_http_open(AVApplicationContext *h, void *obj, const char *url, int error, int http_code, int64_t filesize);
+void av_application_will_http_seek(AVApplicationContext *h, void *obj, const char *url, int64_t offset);
+void av_application_did_http_seek(AVApplicationContext *h, void *obj, const char *url, int64_t offset, int error, int http_code);
+//tcp event
+int av_application_on_tcp_will_open(AVApplicationContext *h);
+int av_application_on_tcp_did_open(AVApplicationContext *h, int error, int fd, AVAppTcpIOControl *control);
+//tcp speed
+void av_application_did_io_tcp_read(AVApplicationContext *h, void *obj, int bytes);
+
+#endif /* AVUTIL_APPLICATION_H */
diff --git a/libavformat/dns_cache.c b/libavformat/dns_cache.c
new file mode 100644
index 0000000..aab2435
--- /dev/null
+++ b/libavformat/dns_cache.c
@@ -0,0 +1,232 @@
+/*
+ * copyright (c) 2017 Raymond Zheng
+ *
+ * This file is part of FFmpeg.
+ *
+ * FFmpeg is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * FFmpeg is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with FFmpeg; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#include "dns_cache.h"
+#include "libavutil/time.h"
+#include "libavutil/mem.h"
+#include "libavformat/network.h"
+#include <string.h>
+#include <stdlib.h>
+
+#if HAVE_PTHREADS
+#include <pthread.h>
+#endif
+
+typedef struct DnsCacheContext DnsCacheContext;
+typedef struct DnsCacheContext {
+    AVDictionary *dns_dictionary;
+    pthread_mutex_t dns_dictionary_mutex;
+    int initialized;
+} DnsCacheContext;
+
+static DnsCacheContext *context = NULL;
+static pthread_once_t key_once = PTHREAD_ONCE_INIT;
+
+static void inner_init(void) {
+    int ret = 0;
+    context = (DnsCacheContext *) av_mallocz(sizeof(DnsCacheContext));
+    if (context) {
+        ret = pthread_mutex_init(&context->dns_dictionary_mutex, NULL);
+        if (!ret) {
+            context->initialized = 1;
+        } else {
+            av_freep(&context);
+        }
+    }
+}
+
+static void free_private_addrinfo(struct addrinfo **p_ai) {
+    struct addrinfo *ai = *p_ai;
+
+    if (ai) {
+        if (ai->ai_addr) {
+            av_freep(&ai->ai_addr);
+        }
+        av_freep(p_ai);
+    }
+}
+
+static int inner_remove_dns_cache(const char *uri, DnsCacheEntry *dns_cache_entry) {
+    if (context && dns_cache_entry) {
+        if (dns_cache_entry->ref_count == 0) {
+            av_dict_set_int(&context->dns_dictionary, uri, 0, 0);
+            free_private_addrinfo(&dns_cache_entry->res);
+            av_freep(&dns_cache_entry);
+        } else {
+            dns_cache_entry->delete_flag = 1;
+        }
+    }
+
+    return 0;
+}
+
+static DnsCacheEntry *new_dns_cache_entry(const char *uri, struct addrinfo *cur_ai, int64_t timeout) {
+    DnsCacheEntry *new_entry = NULL;
+    int64_t cur_time         = av_gettime_relative();
+
+    if (cur_time < 0) {
+        goto fail;
+    }
+
+    new_entry = (DnsCacheEntry *) av_mallocz(sizeof(struct DnsCacheEntry));
+    if (!new_entry) {
+        goto fail;
+    }
+
+    new_entry->res = (struct addrinfo *) av_mallocz(sizeof(struct addrinfo));
+    if (!new_entry->res) {
+        av_freep(&new_entry);
+        goto fail;
+    }
+
+    memcpy(new_entry->res, cur_ai, sizeof(struct addrinfo));
+
+    new_entry->res->ai_addr = (struct sockaddr *) av_mallocz(sizeof(struct sockaddr));
+    if (!new_entry->res->ai_addr) {
+        av_freep(&new_entry->res);
+        av_freep(&new_entry);
+        goto fail;
+    }
+
+    memcpy(new_entry->res->ai_addr, cur_ai->ai_addr, sizeof(struct sockaddr));
+    new_entry->res->ai_canonname = NULL;
+    new_entry->res->ai_next      = NULL;
+    new_entry->ref_count         = 0;
+    new_entry->delete_flag       = 0;
+    new_entry->expired_time      = cur_time + timeout * 1000;
+
+    return new_entry;
+
+fail:
+    return NULL;
+}
+
+DnsCacheEntry *get_dns_cache_reference(const char *uri) {
+    AVDictionaryEntry *elem = NULL;
+    DnsCacheEntry *dns_cache_entry = NULL;
+    int64_t cur_time = av_gettime_relative();
+
+    if (cur_time < 0 || !uri || strlen(uri) == 0) {
+        return NULL;
+    }
+
+    if (!context || !context->initialized) {
+#if HAVE_PTHREADS
+        pthread_once(&key_once, inner_init);
+#endif
+    }
+
+    if (context && context->initialized) {
+        pthread_mutex_lock(&context->dns_dictionary_mutex);
+        elem = av_dict_get(context->dns_dictionary, uri, NULL, AV_DICT_MATCH_CASE);
+        if (elem) {
+            dns_cache_entry = (DnsCacheEntry *) (intptr_t) strtoll(elem->value, NULL, 10);
+            if (dns_cache_entry) {
+                if (dns_cache_entry->expired_time < cur_time) {
+                    inner_remove_dns_cache(uri, dns_cache_entry);
+                    dns_cache_entry = NULL;
+                } else {
+                    dns_cache_entry->ref_count++;
+                }
+            }
+        }
+        pthread_mutex_unlock(&context->dns_dictionary_mutex);
+    }
+
+    return dns_cache_entry;
+}
+
+int release_dns_cache_reference(const char *uri, DnsCacheEntry **p_entry) {
+    DnsCacheEntry *entry = *p_entry;
+
+    if (!uri || strlen(uri) == 0) {
+        return -1;
+    }
+
+    if (context && context->initialized && entry) {
+        pthread_mutex_lock(&context->dns_dictionary_mutex);
+        entry->ref_count--;
+        if (entry->delete_flag && entry->ref_count == 0) {
+            inner_remove_dns_cache(uri, entry);
+            entry = NULL;
+        }
+        pthread_mutex_unlock(&context->dns_dictionary_mutex);
+    }
+    return 0;
+}
+
+int remove_dns_cache_entry(const char *uri) {
+    AVDictionaryEntry *elem = NULL;
+    DnsCacheEntry *dns_cache_entry = NULL;
+
+    if (!uri || strlen(uri) == 0) {
+        return -1;
+    }
+
+    if (context && context->initialized) {
+        pthread_mutex_lock(&context->dns_dictionary_mutex);
+        elem = av_dict_get(context->dns_dictionary, uri, NULL, AV_DICT_MATCH_CASE);
+        if (elem) {
+            dns_cache_entry = (DnsCacheEntry *) (intptr_t) strtoll(elem->value, NULL, 10);
+            if (dns_cache_entry) {
+                inner_remove_dns_cache(uri, dns_cache_entry);
+            }
+        }
+        pthread_mutex_unlock(&context->dns_dictionary_mutex);
+    }
+
+    return 0;
+}
+
+int add_dns_cache_entry(const char *uri, struct addrinfo *cur_ai, int64_t timeout) {
+    DnsCacheEntry *new_entry = NULL;
+    DnsCacheEntry *old_entry = NULL;
+    AVDictionaryEntry *elem  = NULL;
+
+    if (!uri || strlen(uri) == 0 || timeout <= 0) {
+        goto fail;
+    }
+
+    if (cur_ai == NULL || cur_ai->ai_addr == NULL) {
+        goto fail;
+    }
+
+    if (context && context->initialized) {
+        pthread_mutex_lock(&context->dns_dictionary_mutex);
+        elem = av_dict_get(context->dns_dictionary, uri, NULL, AV_DICT_MATCH_CASE);
+        if (elem) {
+            old_entry = (DnsCacheEntry *) (intptr_t) strtoll(elem->value, NULL, 10);
+            if (old_entry) {
+                pthread_mutex_unlock(&context->dns_dictionary_mutex);
+                goto fail;
+            }
+        }
+        new_entry = new_dns_cache_entry(uri, cur_ai, timeout);
+        if (new_entry) {
+            av_dict_set_int(&context->dns_dictionary, uri, (int64_t) (intptr_t) new_entry, 0);
+        }
+        pthread_mutex_unlock(&context->dns_dictionary_mutex);
+
+        return 0;
+    }
+
+fail:
+    return -1;
+}
diff --git a/libavformat/dns_cache.h b/libavformat/dns_cache.h
new file mode 100644
index 0000000..23c695e
--- /dev/null
+++ b/libavformat/dns_cache.h
@@ -0,0 +1,39 @@
+/*
+ * copyright (c) 2017 Raymond Zheng
+ *
+ * This file is part of FFmpeg.
+ *
+ * FFmpeg is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * FFmpeg is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with FFmpeg; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#ifndef AVUTIL_DNS_CACHE_H
+#define AVUTIL_DNS_CACHE_H
+
+#include "libavutil/log.h"
+#include <stdint.h>
+
+typedef struct DnsCacheEntry {
+    volatile int ref_count;
+    volatile int delete_flag;
+    int64_t expired_time;
+    struct addrinfo *res;  // construct by private function, not support ai_next and ai_canonname, can only be released using free_private_addrinfo
+} DnsCacheEntry;
+
+DnsCacheEntry *get_dns_cache_reference(const char *uri);
+int release_dns_cache_reference(const char *uri, DnsCacheEntry **p_entry);
+int remove_dns_cache_entry(const char *uri);
+int add_dns_cache_entry(const char *uri, struct addrinfo *cur_ai, int64_t timeout);
+
+#endif /* AVUTIL_DNS_CACHE_H */
-- 
2.39.5 (Apple Git-154)

